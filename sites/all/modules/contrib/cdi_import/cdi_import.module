<?php

/**
 * @file
 * CDI import.
 */

/**
 * Api function to get the CDI import info.
 */
function cdi_import_get_info() {
  static $info = FALSE;

  if (!$info) {
    return module_invoke_all('cdi_import_info');
  }

  return $info;
}

/**
 * Implements hook_cdi_import_info().
 */
function cdi_import_cdi_import_info() {
  $info = array();

  $info['node'] = array(
    'bundle_export_callback' => 'node_type_get_type',
    'bundle_save_callback' => 'node_type_save',
    'export_menu' => array(
      'path' => 'admin/structure/types/export',
      'access arguments' => 'administer content types',
      ),
    'import_menu' => array(
      'path' => 'admin/structure/types/import',
      'access arguments' => 'administer content types',
      ),
    );

  $info['user'] = array(
    'bundle_export_callback' => '_bc_bundle_export_ignore',
    'bundle_save_callback' => '_bc_bundle_save_ignore',
    'export_menu' => array(
      'path' => 'admin/config/people/accounts/export',
      'access arguments' => 'administer users',
      ),
    'import_menu' => array(
      'path' => 'admin/config/people/accounts/import',
      'access arguments' => 'administer users',
      ),
    );

  if (module_exists('taxonomy')) {
    $info['taxonomy_term'] = array(
      'bundle_export_callback' => '_bc_copy_taxonomy_load',
      'bundle_save_callback' => '_bc_copy_taxonomy_save',
      'export_menu' => array(
        'path' => 'admin/structure/taxonomy/export',
        'access arguments' => 'administer taxonomy',
        ),
      'import_menu' => array(
        'path' => 'admin/structure/taxonomy/import',
        'access arguments' => 'administer taxonomy',
        ),
      );
  }

  return $info;
}




function cdi_import_enable(){
    $query = db_select('languages', 'n');
    $query->fields('n',array('language'))//SELECT the fields from node
		->condition('language', 'es', '=');    
    $result = $query->execute();
    $español = false;
    while($record = $result->fetchAssoc()){
		if($record['language']=="es"){
			$español=true;
		}
    }
    
    if(!$español){
		locale_add_language("es");
    }

	drupal_flush_all_caches();
    cache_clear_all();

	db_update('languages') // Table name no longer needs {}
	->fields(array(
		'prefix' => 'en',
	))
	->condition('language', 'en', '=')
	->execute();

	db_update('languages') // Table name no longer needs {}
	->fields(array(
		'prefix' => 'es',
	))
	->condition('language', 'es', '=')
	->execute();

	$negotation = array(
		LOCALE_LANGUAGE_NEGOTIATION_URL => 2,
    );
	language_negotiation_set(LANGUAGE_TYPE_INTERFACE, $negotation);
}

/**
 * Implements hook_menu().
 */
function cdi_import_menu() {
  $items = array();

  $bc_info = cdi_import_get_info();

  foreach ($bc_info as $entity_type => $info) {
    $items[$info['export_menu']['path']] = array(
      'title' => 'Export',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cdi_import_export', $entity_type),
      'access arguments' => array($info['export_menu']['access arguments']),
      'type' => MENU_LOCAL_TASK
      );
    $items[$info['import_menu']['path']] = array(
      'title' => 'Import',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('cdi_import_import', $entity_type),
      'access callback' => 'cdi_import_import_access',
      'access arguments' => array($info['import_menu']['access arguments']),
      'type' => MENU_LOCAL_TASK
      );
  }

  $items['importar/estructura/taxonomias'] = array(
    'title' => 'Importar estructura taxonomias',
    'page callback' => 'importar_estructura_taxonomias',
    'type' => MENU_SUGGESTED_ITEM,
    'access arguments' => array('access content'),
    );

  $items['importar/estructura/contenidos'] = array(
    'title' => 'Importar estructura contenidos',
    'page callback' => 'importar_estructura_contenidos',
    'type' => MENU_SUGGESTED_ITEM,
    'access arguments' => array('access content'),
    ); 

  $items['importar/contenido/completo'] = array(
    'title' => 'Importar estructura contenidos',
    'page callback' => 'importar_contenido_completo',
    'type' => MENU_SUGGESTED_ITEM,
    'access arguments' => array('access content'),
    );





	return $items;
}

function importar_estructura_contenidos(){
 $fichero = file_get_contents('ctypes.txt', true);
 try {
   cdi_import_import_manual($fichero);
   echo "bien";
 } catch (Exception $e) {
   print_r($e);
 }
 echo "1";
$_SESSION['install-step']=2;
}

function cdi_import_add_custom_term($termname, $vocabulary, $parent, $return = 'id'){
	//busca el vovabulary
	$voc = taxonomy_vocabulary_machine_name_load($vocabulary);
	if($voc && isset($voc->vid)){
		$term = new stdClass();
		$term->name = $termname;
		$term->vid = $voc->vid;
		$term->vocabulary_machine_name = $voc->machine_name;
		taxonomy_term_save($term);
		if(isset($term->tid)){
			return ($return == 'id') ? $term->tid : $term;
		}
	}
	return false;
}

function cdi_import_add_custom_term_list($termname, $vocabulary, $parent = null, $count){
	$terms = array();
	for($i = 1; $i <= $count; $i++){
		$_termName = "{$termname} {$i}";
		$_termId = cdi_import_add_custom_term($_termName, $vocabulary, $parent);
		if($_termId) $terms[$_termId] = $_termName;
	}
	return $terms;
}

function addNoticias($start, $end, $anuncios, $relacionadas, $multimedia, $multimedia_des, $destacada, $subcategory){
	$randSubCat = array_rand($subcategory, 1);
	$path = $subcategory[$randSubCat]['path'];
	//Nodos para las noticias
	for($i = $start; $i <= $end; $i++){
		$node = new stdClass();
		$node->title="Noticia Número ".$i;
		$node->status=1;
		$node->comment=0;
		$node->promote=0;
		$node->type="noticias";
		$node->language="es";
		$node->field_activar_anuncios_niciasot['und'][0]['value'] = $anuncios;//RND
		$node->field_activar_not_rel_noticias['und'][0]['value'] = $relacionadas;//RND
		$node->field_audiencia_noticias['und'];
		$node->field_comentario_1_noticias['und'][0]['value']="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut quis volutpat metus. ";
		$node->field_comentario_2_noticias['und'][0]['value']="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut quis volutpat metus. ";
		$node->field_comentario_3_noticias['und'][0]['value']="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut quis volutpat metus. ";
		$node->field_descripcion_corta_noticias['und'][0]['value']="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut quis volutpat metus. ";
		$node->field_es_mult_des_noticias['und'][0]['value']= $multimedia_des;//RND
		$node->field_es_not_des_noticias['und'][0]['value']= $destacada;//RND
		$filepath = drupal_realpath('profiles/uniandes_base/images/noticias/1mini.jpg');
		$file = (object) array(
			'uid' => 1,
			'uri' => $filepath,
			'filemime' => file_get_mimetype($filepath),
			'status' => 1,
		);
		$file = file_copy($file, 'public://');
		$node->field_imagen_miniatura_noticias['und'][0]=(array)$file;
		$filepath = drupal_realpath('profiles/uniandes_base/images/noticias/1.jpg');
		$file = (object) array(
			'uid' => 1,
			'uri' => $filepath,
			'filemime' => file_get_mimetype($filepath),
			'status' => 1,
		);
		$file = file_copy($file, 'public://');
		$node->field_imagenes_noticias['und'][0]=(array)$file;
		$filepath = drupal_realpath('profiles/uniandes_base/images/noticias/1m.jpg');
		$file = (object) array(
			'uid' => 1,
			'uri' => $filepath,
			'filemime' => file_get_mimetype($filepath),
			'status' => 1,
		);
		$file = file_copy($file, 'public://');
		$node->field_img_noticias_mob['und'][0]=(array)$file;
		$node->field_mostrar_autor_noticias['und'][0]['value']=0;
		$node->field_mostrar_solotexto_noticias['und'][0]['value']=0;
		$node->field_multimedia_noticias['und'][0]['value']= $multimedia;//RND
		$node->field_subcategoria_noticias['und'][0]['tid']= $randSubCat;//RND
		$node->field_tercero_noticias['und'][0]['value']=0;
		$node->field_texto_competo_noticias['und'][0]['value']="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut quis volutpat metus. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Integer vestibulum felis aliquet tempor ullamcorper. Integer et dictum neque. Integer magna neque, pretium vel finibus a, interdum id lorem. Integer dignissim scelerisque fringilla. Phasellus non posuere eros. Pellentesque in dui sit amet dolor rutrum laoreet at vitae mauris. Vestibulum massa tortor, malesuada et justo et, fermentum mollis nisi. Quisque at convallis quam. Aenean ac volutpat ipsum. Donec facilisis sem eget est tempus, et pretium nunc eleifend. Sed feugiat et tellus sit amet viverra. Duis nec eleifend lectus, non dictum massa. Curabitur ultrices sagittis eros. Integer ut consectetur lacus. Vivamus ornare, eros et rhoncus scelerisque, purus felis sollicitudin justo, vitae facilisis eros tellus eget purus. Proin condimentum dictum ipsum posuere malesuada. Vestibulum ut nisi nunc. Morbi convallis nulla vel felis aliquam lacinia. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vivamus vel scelerisque dolor, eu dignissim eros. Mauris vestibulum at risus egestas aliquet. Vivamus eget feugiat lacus. Aliquam at ultrices felis. Nam nec mollis lacus. Ut odio nulla, dictum nec laoreet id, venenatis quis metus";
		$node->field_texto_competo_noticias['und'][0]['format']='filtered_html';
		$node->field_texto_noticia_noticias['und'][0]['value']='Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut quis volutpat metus. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Integer vestibulum felis aliquet tempor ullamcorper. Integer et dictum neque. Integer magna neque, pretium vel finibus a, interdum id lorem. Integer dignissim scelerisque fringilla. Phasellus non posuere eros. Pellentesque in dui sit amet dolor rutrum laoreet at vitae mauris. Vestibulum massa tortor, malesuada et justo et, fermentum mollis nisi. Quisque at convallis quam. Aenean ac volutpat ipsum. Donec facilisis sem eget est tempus, et pretium nunc eleifend. Sed feugiat et tellus sit amet viverra. Duis nec eleifend lectus, non dictum massa. Curabitur ultrices sagittis eros. Integer ut consectetur lacus. Vivamus ornare, eros et rhoncus scelerisque, purus felis sollicitudin justo, vitae facilisis eros tellus eget purus. Proin condimentum dictum ipsum posuere malesuada. Vestibulum ut nisi nunc. Morbi convallis nulla vel felis aliquam lacinia. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vivamus vel scelerisque dolor, eu dignissim eros. Mauris vestibulum at risus egestas aliquet. Vivamus eget feugiat lacus. Aliquam at ultrices felis. Nam nec mollis lacus. Ut odio nulla, dictum nec laoreet id, venenatis quis metus';
		$node->field_texto_noticia_noticias['und'][0]['format']='filtered_html';
		node_object_prepare($node);
		$node->path['alias']= "{$path}/noticia-numero-{$i}";
		node_save( $node );
	}
}

//verifica si un rol existe, sino, lo crea
function getUserRoleObject($id, $name){
	//verifica por id
	$role = user_role_load_by_name($name);
	if(!$role){
		$role = new stdClass();
		$role->name = $name;
		user_role_save($role);
	}
	return $role;
}

function importar_contenido_completo(){
	//lee el fiche de importación de roles y lo asigna en $profiles(array)
	$fichero = file_get_contents('profiles.txt', true);
	eval('$profiles = ' . $fichero . ';');
	//asigna el permisos de búsqueda para todos los usuarios
	$otherPerms = array(
		'search content' => true
	);
	//inicia la creación de roles y permisos
	if(isset($profiles) && is_array($profiles)){
		foreach($profiles as $_roleId => $_roleData){
			$userRole = getUserRoleObject($_roleId, $_roleData['name']);
			$permis = array_keys(array_merge($_roleData['perms'], $otherPerms));
			foreach($permis as $perm){
				try{
					user_role_grant_permissions($userRole->rid, array($perm));
				}catch(Exception $e){
					continue;
				}
			}
		}
	}
	
	/*fecha de instalación*/
	date_default_timezone_set('America/Bogota');
	$installDate = date('Y-m-d', time()) . ' 00:00:00';
	$installDate2 = date('Y-m-d', time()) . 'T00:00:00';
	$monthBefore = date('Y-m-d', strtotime('+2 months')) . ' 23:59:59';
	$monthBefore2 = date('Y-m-d', strtotime('+2 months')) . 'T23:59:59';
	/*fecha de instalación*/
	
	/*
	* Audiencias
	*/
	$audiencias = cdi_import_add_custom_term_list('Audiencia', 'taxonomia_audiencia', null, 3);
	
	/*
	* Categorías
	*/
	//Agrega el nodo principal de noticias
	$noticiasAlias = 'noticias';
	$node = new stdClass();
	$node->title = "Noticias";
	$node->status = 1;
	$node->comment = 0;
	$node->promote = 0;
	$node->type= 'home_de_noticias';
	$node->language = 'es';
	$node->path['alias']= $noticiasAlias;
	node_object_prepare($node);
	node_save($node);
	$noticiasId = $node->nid;
	//agrega categorías, subcategorías y redirecciones
	$subcategorias = array();
	for($i = 1; $i <= 1; $i++){
		$catName = "Categoría {$i}";
		$cat = cdi_import_add_custom_term($catName, 'categoria', null, 'obj');
		if($cat){
			$path = str_replace('tags/', '', $cat->path['alias']);
			$cat->field_path_noticias['und'][0]['value'] = "{$noticiasAlias}/{$path}";
			taxonomy_term_save($cat);
			//crea la redirección para la categoría
			db_insert('url_alias')->fields(array(
				'source' => 'node/'. $noticiasId,
				'alias' => "{$noticiasAlias}/{$path}",
				'language' => 'und',
			))->execute();
			for($x = 1; $x <= 1; $x++){
				$_catName = "Subcategoría {$i} > {$x}";
				$_cat = cdi_import_add_custom_term($_catName, 'subcategoria', null, 'obj');
				if($_cat){
					$_path = str_replace('tags/', '', $_cat->path['alias']);
					$_cat->field_path_noticias['und'][0]['value'] = "{$noticiasAlias}/{$path}/{$_path}";
					$_cat->field_categoria['und'][0]['tid'] = $cat->tid;
					taxonomy_term_save($_cat);
					$subcategorias[$_cat->tid] = array(
						'path' => "{$noticiasAlias}/{$path}/{$_path}",
					);
					//crea la redirección para la categoría
					db_insert('url_alias')->fields(array(
						'source' => 'node/'. $noticiasId,
						'alias' => "{$noticiasAlias}/{$path}/{$_path}",
						'language' => 'und',
					))->execute();
				}
			}
		}
	}
	//$start, $end, $anuncios, $relacionadas, $multimedia, $multimedia_des, $destacada, $subcategory_key
	addNoticias(1, 	5,	1, 1, 1, 1, 1, $subcategorias);
	addNoticias(6, 	10,	0, 1, 1, 0, 0, $subcategorias);
	addNoticias(11,	15,	1, 0, 1, 0, 1, $subcategorias);
	addNoticias(16,	20,	0, 0, 0, 0, 0, $subcategorias);
	addNoticias(21, 25,	1, 0, 0, 0, 1, $subcategorias);
	addNoticias(26,	30,	0, 1, 1, 0, 0, $subcategorias);
	
	
	//Categorias publicaciones
	for($i = 1; $i <= 2; $i++){
		$pubName = "Trimestre {$i}";
		$pub = cdi_import_add_custom_term($pubName, 'categorias_publicaciones', null, 'obj');
		if($pub){
			$pub->field_boton_anuncio['und'][0]['title']="Conoce más";
			$pub->field_boton_anuncio['und'][0]['url']="https://google.com.co";
			$pub->field_boton_anuncio['und'][0]['attributes']['target']="_blank";
			$pub->field_descripcion_publicitario['und'][0]['value']="Descripción de prueba";
			$pub->field_titulo_cifras['und'][0]['value']="Descubre nuestras publicaciones más recientes";
			$pub->field_titulo_publicitario['und'][0]['value']="Titulo test";
			taxonomy_term_save($pub);
		}
	}
	$categoria_publicaciones_term = $pub->tid;
	variable_set('taxonomy', $categoria_publicaciones_term);
	//Facultades
	$fac = cdi_import_add_custom_term('Facultad de Ingenieria', 'facultades', null, 'obj');
	$facultad_term = $fac->tid;
	
	//Paises
	$pais = cdi_import_add_custom_term('Colombia', 'paises', null, 'obj');
	
	//Tags
	$tag = cdi_import_add_custom_term('Tag 1', 'tags', null, 'obj');
	
	//Tipo de contenido maestra 11
	$tipo11 = cdi_import_add_custom_term('Contenido 1', 'tipo_de_contenido_maestra_11', null, 'obj');
	
	//Tipo de contenido programas
	$tipoProg = cdi_import_add_custom_term('Contenido 1', 'tipos_programas', null, 'obj');
	$caja_listado_uno_term = $tipoProg->tid;
	//Nodo para anuncios
	for ($i=1; $i < 3; $i++) { 
		$node = new stdClass();
		$node->title="Conoce nuestras temáticas ".$i." :";
		$node->status=1;
		$node->comment=0;
		$node->promote=0;
		$node->type="anuncios";
		$node->language="es";
		$node->field_boton_anuncio['und'][0]['title']="Ver más";
		$node->field_boton_anuncio['und'][0]['url']="http://educacioncontinuada.uniandes.edu.co/index.php/nuestra-oferta/cursos-abiertos/?filtro_dep=17&filtro_fecha=5_2017";
		$node->field_descripcion_corta_anuncios['und'][0]['value']="Desarrolla habilidades de creatividad, liderazgo, confianza, empatía y más.";
		$node->field_descripcion_corta_anuncios['und'][0]['format']="filtered_html";
		$node->field_fecha_publicacion['und'][0]['value']= $installDate;
		$node->field_fecha_publicacion['und'][0]['value2']= $monthBefore;
		$node->field_fecha_publicacion['und'][0]['show_todate']=1;
		$node->field_fecha_publicacion['und'][0]['timezone']="America/New_York";
		$node->field_fecha_publicacion['und'][0]['offset']="-14400";
		$node->field_fecha_publicacion['und'][0]['offset2']="-14400";
		$node->field_fecha_publicacion['und'][0]['timezone_db']="UTC";
		$node->field_fecha_publicacion['und'][0]['date_type']="datetime";
		$filepath = drupal_realpath('profiles/uniandes_base/images/anuncios/1.jpg');
		$file = (object) array(
			'uid' => 1,
			'uri' => $filepath,
			'filemime' => file_get_mimetype($filepath),
			'status' => 1,
		);
		$file = file_copy($file, 'public://');
		$node->field_imagenes['und'][0]=(array)$file;
		node_object_prepare($node);
		node_save($node);
	}

	//Nodos para Caja para listado 1
	for ($i=1; $i < 3; $i++) { 
		$node = new stdClass();
		$node->title="Caja para listado 1 Nº:".$i;
		$node->status=1;
		$node->comment=0;
		$node->promote=0;
		$node->type="caja_para_listado_1";
		$node->language="es";
		$node->field_descrip_corta_caja_list1['und'][0]['value']="Descripción corta";
		$node->field_descrip_larga_caja_list1['und'][0]['format']="Descripción larga para la caja";
		$node->field_facultadad_caja_list1['und'][0]['tid']=$facultad_term;
		$filepath = drupal_realpath('profiles/uniandes_base/images/caja_listado_1/1.jpg');
		$file = (object) array(
			'uid' => 1,
			'uri' => $filepath,
			'filemime' => file_get_mimetype($filepath),
			'status' => 1,
		);
		$file = file_copy($file, 'public://');
		$node->field_img_background_caja_list1['und'][0]=(array)$file;
		$node->field_tipo_caja['und'][0]['tid']=$caja_listado_uno_term;
		$node->field_url_caja_list1['und'][0]['title']="Ver más";
		$node->field_url_caja_list1['und'][0]['url']="https://google.com.co";
		$node->field_url_caja_list1['und'][0]['attributes']['target']="_blank";
		node_object_prepare($node);
		node_save( $node );
	}
	
	//Nodos para Caja para listado 2
	for ($i=1; $i < 3; $i++) { 
		$node = new stdClass();
		$node->title="Caja para listado 2 Nº:".$i;
		$node->status=1;
		$node->comment=0;
		$node->promote=0;
		$node->type="caja_para_listado_2";
		$node->language="es";
		$filepath = drupal_realpath('profiles/uniandes_base/images/caja_listado_2/1.jpg');
		$file = (object) array(
		'uid' => 1,
		'uri' => $filepath,
		'filemime' => file_get_mimetype($filepath),
		'status' => 1,
		);
		$file = file_copy($file, 'public://');
		$node->field_img_background_caja_list2['und'][0]=(array)$file;
		$node->field_tipo_caja_list2['und'][0]['tid']=$caja_listado_uno_term;
		$node->field_url_facebook_caja_list2['und'][0]['value']="https://www.facebook.com";
		$node->field_url_twitter_caja_list2['und'][0]['value']="https://twitter.com";
		$node->field_url_linkedin_caja_list2['und'][0]['value']="https://co.linkedin.com/";
		$node->field_url_instagram_caja_list2['und'][0]['value']="https://www.instagram.com/?hl=es";
		$node->field_url_snapchat_caja_list2['und'][0]['value']="https://www.snapchat.com/l/es/";
		$node->field_url_vimeo_cala_list2['und'][0]['value']="https://vimeo.com/";
		$node->field_url_youtube_caja_list2['und'][0]['value']="https://www.youtube.com/";
		$node->field_url_googleplus_caja_list2['und'][0]['value']="https://plus.google.com/?hl=es";
		node_object_prepare($node);
		node_save( $node );
	}
	
	//Nodos para Publicaciones
	for ($i=1; $i < 5; $i++) { 
		$node = new stdClass();
		$node->title="Publicación Nº:".$i;
		$node->status=1;
		$node->comment=0;
		$node->promote=0;
		$node->type="publicaciones";
		$node->language="es";
		$filepath = drupal_realpath('profiles/uniandes_base/images/caja_listado_2/1.jpg');
		$file = (object) array(
			'uid' => 1,
			'uri' => $filepath,
			'filemime' => file_get_mimetype($filepath),
			'status' => 1,
		);
		$file = file_copy($file, 'public://');
		$node->field_img_background_caja_list2['und'][0]=(array)$file;
		$node->field_autor['und'][0]['value']="Hugo Fazio . Luciana Fazio";
		$node->field_boton_anuncio['und'][0]['title']="Conoce más";
		$node->field_boton_anuncio['und'][0]['url']="https://google.com";
		$node->field_categoria_a_la_que_pertene['und'][0]['target_id']=$categoria_publicaciones_term;
		$node->field_cubierta['und'][0]['value']="Plástico";
		$node->field_descripcion1_maestra_1['und'][0]['value']="El presente del medio oriente. Ver más imágenes Ver Más Imagenes (0) Nombre: 'Hugo Fazio . Luciana Fazio' Area temática: Historia ISBN/ISSN: 978-958-774-447-7 El Medio Oriente constituye la región que más ha acaparado la atención mundial en los últimos años. Desde que se inició el nuevo siglo, se ha convertido en la región por excelencia productora de acontecimientos cuyas repercusiones se extienden por lugares distantes de sus epicentros. Lo anterior ha llevado a numerosos analistas a ofrecer descripciones y explicaciones del acontecer regional actual. A medida que seguíamos de cerca estos análisis llegamos al convencimiento de que la mayoría de estos estudios carece de una fundamentada profundidad histórica. Esta insuficiencia, a nuestro modo de ver, se ha convertido en una de las principales razones de que rara vez se logre develar sus intríngulis y de que produzca cansancio la lectura de lo que usualmente se dice: se ha vuelto moneda corriente la repetición de lugares comunes y de frases clichés. El libro que tiene el lector en sus manos constituye un ejercicio de historia del tiempo presente y se propone brindar una síntesis interpretativa de las dimensiones diacrónicas que comporta el Medio Oriente contemporáneo y sus entrecruzamientos con los fenómenos inherentes a la globalización.";
		$node->field_descripcion1_maestra_1['und'][0]['format']="filtered_html";
		$node->field_descripcion_publicitario['und'][0]['value']="Descripción banner";
		$node->field_disponibilidad['und'][0]['value']="Stock Disponible";
		$node->field_edicion['und'][0]['value']="Primera Edición";
		$node->field_editorial['und'][0]['value']="Universidad de los Andes, Ediciones Uniandes";
		$node->field_fecha_publicacion_libro['und'][0]['value']="Octubre de 2016";
		$node->field_formato_libro['und'][0]['value']="PDF";
		$node->field_idioma_libro['und'][0]['value']="Castellano";
		$filepath = drupal_realpath('profiles/uniandes_base/images/publicaciones/img_grande.png');
		$file = (object) array(
			'uid' => 1,
			'uri' => $filepath,
			'filemime' => file_get_mimetype($filepath),
			'status' => 1,
		);
		$file = file_copy($file, 'public://');
		$node->field_imagen_banner_maestra4['und'][0]=(array)$file;
		$filepath = drupal_realpath('profiles/uniandes_base/images/publicaciones/img_mobile_publicitario.jpg');
		$file = (object) array(
			'uid' => 1,
			'uri' => $filepath,
			'filemime' => file_get_mimetype($filepath),
			'status' => 1,
		);
		$file = file_copy($file, 'public://');
		$node->field_imagen_banner_mob_maestra4['und'][0]=(array)$file;
		$filepath = drupal_realpath('profiles/uniandes_base/images/publicaciones/img_fondo_cifras.jpg');
		$file = (object) array(
			'uid' => 1,
			'uri' => $filepath,
			'filemime' => file_get_mimetype($filepath),
			'status' => 1,
		);
		$file = file_copy($file, 'public://');
		$node->field_imagen_fondo_cifras['und'][0]=(array)$file;
		$filepath = drupal_realpath('profiles/uniandes_base/images/publicaciones/img_miniatura.jpg');
		$file = (object) array(
			'uid' => 1,
			'uri' => $filepath,
			'filemime' => file_get_mimetype($filepath),
			'status' => 1,
		);
		$file = file_copy($file, 'public://');
		$node->field_imagen_publicaciones['und'][0]=(array)$file;
		$node->field_numero_paginas['und'][0]['value']="126";
		$node->field_precio_libro['und'][0]['value']="$45.000";
		$node->field_sub_titulo_publicaciones['und'][0]['value']=" Este libro constituye un ejercicio de historia del tiempo presente y se propone brindar una síntesis interpretativa de las dimensiones diacrónicas que comporta el Medio Oriente contemporáneo y sus entrecruzamientos con la globalización.";
		$node->field_tematica['und'][0]['value']="Historia";
		$node->field_isbn['und'][0]['value']="978-958-774-447-7";
		$node->field_texto_competo_noticias['und'][0]['value']="texto de prueba";
		$node->field_texto_competo_noticias['und'][0]['format']="filtered_html";
		$node->field_titulo_publicitario['und'][0]['value']="Titulo Banner";
		node_object_prepare($node);
		node_save( $node );
	}
	
	//Nodos para eventos
	for ($i=1; $i < 6; $i++) { 
		$ini = $i + 3;
		$fin = $i + 6;
		$eventInit = date('Y-m-d', strtotime("+{$ini} months")) . 'T00:00:00';
		$eventFin = date('Y-m-d', strtotime("+{$fin} months")) . 'T23:59:59';
		$eventDateStr = strftime("%d de %B del %Y", strtotime("+{$ini} months"));
		$node = new stdClass();
		$node->title="Evento Nº:".$i;
		$node->status=1;
		$node->comment=0;
		$node->promote=0;
		$node->type="eventos";
		$node->language="es";
		$node->field_boton_noticia['und'][0]['title']="Asistir";
		$node->field_boton_noticia['und'][0]['url']="https://google.com";
		$node->field_boton_noticia['und'][0]['attributes']['target']="_blank";
		$node->field_descripcion1_maestra_1['und'][0]['value']="Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nisi numquam voluptates dolorem eveniet, ipsam tempore nobis quasi. Voluptates temporibus facilis blanditiis vel impedit, ullam alias quisquam ut nulla beatae quae.Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nisi numquam voluptates dolorem eveniet, ipsam tempore nobis quasi. Voluptates temporibus facilis blanditiis vel impedit, ullam alias quisquam ut nulla beatae quae.Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nisi numquam voluptates dolorem eveniet, ipsam tempore nobis quasi. Voluptates temporibus facilis blanditiis vel impedit, ullam alias quisquam ut nulla beatae quae.";
		$node->field_descripcion1_maestra_1['und'][0]['format']="filtered_html";
		$node->field_descripcion_eventos['und'][0]['value']="Descripción del evento en cuestión";
		$node->field_fecha_evento['und'][0]['value'] = "28 de abril de 2018";
		$node->field_fecha_evento_calendario['und'][0]['value']= $eventInit;
		$node->field_fecha_evento_calendario['und'][0]['value2']= $eventFin;
		$node->field_fecha_evento_calendario['und'][0]['show_todate']=1;
		$node->field_fecha_evento_calendario['und'][0]['timezone']="America/New_York";
		$node->field_fecha_evento_calendario['und'][0]['offset']="-14400";
		$node->field_fecha_evento_calendario['und'][0]['offset2']="-18000";
		$node->field_fecha_evento_calendario['und'][0]['timezone_db']="UTC";
		$node->field_fecha_evento_calendario['und'][0]['date_type']="date";
		$node->field_hora_evento['und'][0]['value']="9:00 am";
		$filepath = drupal_realpath('profiles/uniandes_base/images/eventos/img_grande.jpg');
		$file = (object) array(
			'uid' => 1,
			'uri' => $filepath,
			'filemime' => file_get_mimetype($filepath),
			'status' => 1,
		);
		$file = file_copy($file, 'public://');  
		$node->field_imagen_banner_maestra4['und'][0]=(array)$file;    
		$filepath = drupal_realpath('profiles/uniandes_base/images/eventos/img_mobile.jpg');
		$file = (object) array(
			'uid' => 1,
			'uri' => $filepath,
			'filemime' => file_get_mimetype($filepath),
			'status' => 1,
		);
		$file = file_copy($file, 'public://');  
		$node->field_imagen_eventos['und'][0]=(array)$file;  
		$filepath = drupal_realpath('profiles/uniandes_base/images/eventos/icono.png');
		$file = (object) array(
			'uid' => 1,
			'uri' => $filepath,
			'filemime' => file_get_mimetype($filepath),
			'status' => 1,
		);
		$file = file_copy($file, 'public://');
		$node->field_imagen_fondo_cifras['und'][0]=(array)$file;
		$node->field_lugar_eventos['und'][0]['value']="Salón W-101";
		$node->field_texto_competo_noticias['und'][0]['value']="Para más información de REES: https://rees2017.uniandes.edu.co/";
		$node->field_texto_competo_noticias['und'][0]['format']="filtered_html";
		node_object_prepare($node);
		node_save( $node );
	}
	//Nodos para el banner home
	for($i=1; $i < 4; $i++){
		$node = new stdClass();
		$node->title = "Bienvenidos al slide Nº:".$i;
		$node->status=1;
		$node->comment=0;
		$node->promote=0;
		$node->type="banner_home";
		$node->language="es";
		$node->field_color_transparencia['und'][0]['value']=1;
		$node->field_fecha_fin_home['und'][0]['value'] = $monthBefore2;
		$node->field_fecha_fin_home['und'][0]['show_todate'];
		$node->field_fecha_fin_home['und'][0]['timezone'] ='America/New_York';
		$node->field_fecha_fin_home['und'][0]['offset'] ='-14400';
		$node->field_fecha_fin_home['und'][0]['offset2'] ='-14400';
		$node->field_fecha_fin_home['und'][0]['value2'] = $monthBefore2;
		$node->field_fecha_fin_home['und'][0]['timezone_db'] ='UTC';
		$node->field_fecha_fin_home['und'][0]['date_type'] ='date';
		$node->field_fecha_inicio_home['und'][0]['value'] = $installDate2;
		$node->field_fecha_inicio_home['und'][0]['show_todate'];
		$node->field_fecha_inicio_home['und'][0]['timezone'] ='America/New_York';
		$node->field_fecha_inicio_home['und'][0]['offset'] ='-14400';
		$node->field_fecha_inicio_home['und'][0]['offset2'] ='-14400';
		$node->field_fecha_inicio_home['und'][0]['value2'] = $installDate2;
		$node->field_fecha_inicio_home['und'][0]['timezone_db'] ='UTC';
		$node->field_fecha_inicio_home['und'][0]['date_type'] ='date';

		$filepath = drupal_realpath('profiles/uniandes_base/images/banner_home/img_grande.jpg');
		$file = (object) array(
			'uid' => 1,
			'uri' => $filepath,
			'filemime' => file_get_mimetype($filepath),
			'status' => 1,
		);
		$file = file_copy($file, 'public://');
		$node->field_imagen['und'][0]=(array)$file;

		$filepath = drupal_realpath('profiles/uniandes_base/images/banner_home/img_mobile.jpg');
		$file = (object) array(
			'uid' => 1,
			'uri' => $filepath,
			'filemime' => file_get_mimetype($filepath),
			'status' => 1,
		);
		$file = file_copy($file, 'public://');
		$node->field_imagen_mobile_bannerh['und'][0]=(array)$file;
		$node->field_porcentaje_transparencia['und'][0]['value']=40;
		$node->field_posicion_texto['und'][0]['value']=0;
		$node->field_sub_titulo['und'][0]['value']="El escritor y periodista William Ospina y el profesor Manuel Rodríguez Becerra hablan sobre degradación ambiental. Modera: Juan P. Ramos.";
		$node->field_url_boton_banner['und'][0]['title']="Ver más";
		$node->field_url_boton_banner['und'][0]['url']="https://google.com.co";
		$node->field_url_boton_banner['und'][0]['attributes']['target']="_blank";
		node_object_prepare($node);
		node_save( $node );
	}



	//Nodo Home de publicaciones
	$node = new stdClass();
	$node->title="Publicaciones";
	$node->status=1;
	$node->comment=0;
	$node->promote=0;
	$node->type="listado_publicaciones";
	$node->language="es";
	$node->path['alias']="publicaciones";
	node_object_prepare($node);
	node_save( $node );  

	//Nodo Home de eventos
	$node = new stdClass();
	$node->title="Eventos";
	$node->status=1;
	$node->comment=0;
	$node->promote=0;
	$node->type="listado_eventos";
	$node->language="es";
	$node->path['alias']="eventos";
	node_object_prepare($node);
	node_save( $node );


	//Nodo Ranking Home
	$node = new stdClass();
	$node->title="Ranking Home";
	$node->status=1;
	$node->comment=0;
	$node->promote=0;
	$node->type="ranking_home";
	$node->language="es";
	$node->field_descripcion_ranking['und'][0]['value']="La Universidad de los Andes es la primera universidad privada del país con acreditación renovada por el máximo período posible, diez años, por el Ministerio de Educación Nacional.";
	$filepath = drupal_realpath('profiles/uniandes_base/images/ranking/img_2.png');
	$file = (object) array(
		'uid' => 1,
		'uri' => $filepath,
		'filemime' => file_get_mimetype($filepath),
		'status' => 1,
	);
	$file = file_copy($file, 'public://');
	$node->field_imagen2_ranking['und'][0]=(array)$file;
	$filepath = drupal_realpath('profiles/uniandes_base/images/ranking/img_acreditacion.png');
	$file = (object) array(
		'uid' => 1,
		'uri' => $filepath,
		'filemime' => file_get_mimetype($filepath),
		'status' => 1,
	);
	$file = file_copy($file, 'public://');
	$node->field_imagen_acredita_ranking['und'][0]=(array)$file;
	$filepath = drupal_realpath('profiles/uniandes_base/images/ranking/img_1.png');
	$file = (object) array(
		'uid' => 1,
		'uri' => $filepath,
		'filemime' => file_get_mimetype($filepath),
		'status' => 1,
	);
	$file = file_copy($file, 'public://');
	$node->field_imagen_ranking['und'][0]=(array)$file;  
	node_object_prepare($node);
	node_save( $node );



	//Nodo Maestra 1
	$node = new stdClass();
	$node->title="Maestra 1";
	$node->status=1;
	$node->comment=0;
	$node->promote=0;
	$node->type="maestra_1";
	$node->language="es";
	$node->field_anuncios_maestra_1['und'][0]['value']=0;
	$node->field_descripcion1_maestra_1['und'][0]['value']="Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede.Donec nec justo eget felis facilisis fermentum. Aliquam porttitor mauris sit amet orci. Aenean dignissim pellentesque felis.";
	$node->field_descripcion1_maestra_1['und'][0]['format']="filtered_html";
	$node->field_descripcion_2_maestra_1['und'][0]['value']="Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Donec odio. Quisque volutpat mattis eros. Nullam malesuada erat ut turpis. Suspendisse urna nibh, viverra non, semper suscipit, posuere a, pede.Donec nec justo eget felis facilisis fermentum. Aliquam porttitor mauris sit amet orci. Aenean dignissim pellentesque felis.";
	$node->field_descripcion_2_maestra_1['und'][0]['format']="filtered_html";
	$filepath = drupal_realpath('profiles/uniandes_base/images/maestra1/img_desktop.jpg');
	$file = (object) array(
		'uid' => 1,
		'uri' => $filepath,
		'filemime' => file_get_mimetype($filepath),
		'status' => 1,
	);
	$file = file_copy($file, 'public://');
	$node->field_imagen_maestra_1['und'][0]=(array)$file;
	$filepath = drupal_realpath('profiles/uniandes_base/images/maestra1/img_mobile.jpg');
	$file = (object) array(
		'uid' => 1,
		'uri' => $filepath,
		'filemime' => file_get_mimetype($filepath),
		'status' => 1,
	);
	$file = file_copy($file, 'public://');
	$node->field_imagen_mobile_maestra1['und'][0]=(array)$file;
	$node->field_noticias_maestra_1['und'][0]['value']=0;
	$node->field_sub_titulo_maestra_1['und'][0]['value']="Subtitulo de prueba";  
	node_object_prepare($node);
	node_save( $node );      


	//Nodo Footer
	for ($i=0; $i < 4; $i++) { 
		$node = new stdClass();
		$node->title="Los Andes";
		$node->status=1;
		$node->comment=0;
		$node->promote=0;
		$node->type="footer";
		$node->language="es";
		$node->field_barra_de_color_footer['und'][0]['rgb']="#FBE983";
		$filepath = drupal_realpath('profiles/uniandes_base/images/footer/icono.png');
		$file = (object) array(
			'uid' => 1,
			'uri' => $filepath,
			'filemime' => file_get_mimetype($filepath),
			'status' => 1,
		);
		$file = file_copy($file, 'public://');
		$node->field_imagen_footer['und'][0]=(array)$file;
		$node->field_sub_titulo_footer['und'][0]['value']="Enlace";
		$node->field_url_footer['und'][0]['value']="https://google.com.co";  
		node_object_prepare($node);
		node_save( $node );  
	}
	$_SESSION['install-step']=3;
	echo "contenido bien";
}



function importar_estructura_taxonomias(){
 $fichero = file_get_contents('taxonomy.txt', true);
 cdi_import_import_manual($fichero);
 echo "taxonomias bien";
$_SESSION['install-step']=1;
}

/**
 * CDI import import access callback.
 *
 * CDI import imports require an additional access check because they are PHP
 * code and PHP is more locked down than the general permission.
 */
function cdi_import_import_access($permission) {
  return user_access($permission) && user_access('use PHP for settings');
}

/**
 * Menu callback: present the export page.
 */
function cdi_import_export($form, &$form_state, $entity_type = 'node') {


  if (isset($form_state['step'])) {
    $step = $form_state['step'];
  }
  else {
    $step = 1;
    $form_state['step'] = $step;
  }

  switch ($step) {

    // Select the bundles.
    case 1:
    $bundles = _cdi_import_bundle_info($entity_type, TRUE);

    $form['bundle-info'] = array(
      '#markup' => t('Select bundles you want to export.'),
      );
    $form['bundles'] = array(
      '#type' => 'tableselect',
      '#header' => array('label' => t('Bundle')),
      '#options' => $bundles,
      '#required' => TRUE,
      '#empty' => t('No bundles found.'),
      );

    $form['next'] = array(
      '#type' => 'submit',
      '#value' => t('Next'),
      );
    break;

    // List the fields / field groups.
    case 2:

      // Field group.
    $all_groups = function_exists('field_group_info_groups') ? field_group_info_groups() : array();

      // Fields.
    $field_options = $instances = array();
    $selected_bundles = $form_state['page_values'][1]['bundles'];
    foreach ($selected_bundles as $key => $bundle) {
      if ($key === $bundle) {
        $instances += field_info_instances($entity_type, $bundle);
      }
    }
    ksort($instances);

    foreach ($instances as $key => $info) {
        $field_options[$key]['field'] = $info['field_name']; // Same as $key.
        $field_options[$key]['label'] = $info['label'];
      }

      $form['fields-info'] = array(
        '#markup' => t('Select fields you want to export.'),
        );
      $form['fields'] = array(
        '#type' => 'tableselect',
        '#header' => array('field' => t('Field name'), 'label' => t('Label')),
        '#options' => $field_options,
        '#empty' => t('No fields found.'),
        );

      // Field group support.
      if (!empty($all_groups)) {
        $group_options = $fieldgroups = array();
        if (isset($all_groups[$entity_type])) {
          foreach ($selected_bundles as $key => $bundle) {
            if ($key === $bundle) {
              if (!isset($all_groups[$entity_type][$key])) {
                continue;
              }
              foreach ($all_groups[$entity_type][$key] as $view_mode => $groups) {
                foreach ($groups as $field_group) {
                  $group_options[$field_group->id]['fieldgroup'] = $field_group->label . ' (' . $field_group->bundle . ' - ' . $field_group->mode .')';
                  $fieldgroups[$field_group->id] = $field_group;
                }
              }
            }
          }
        }
        if (!empty($group_options)) {
          $form['fieldgroups-info'] = array(
            '#markup' => t('Select field groups you want to export.'),
            );
          $form['fieldgroups'] = array(
            '#type' => 'tableselect',
            '#header' => array('fieldgroup' => t('Field group name')),
            '#options' => $group_options,
            );
          $form['fieldgroups-full'] = array(
            '#type' => 'value',
            '#value' => $fieldgroups,
            );
        }
      }

      $form['actions'] = array('#type' => 'actions');
      $form['actions']['next'] = array(
        '#type' => 'submit',
        '#value' => t('Export'),
        );

      $bc_info = cdi_import_get_info();
      $form['actions']['cancel'] = array(
        '#markup' => l(t('Cancel'), $bc_info[$entity_type]['export_menu']['path']),
        );

      break;

    // Export data.
      case 3:

      $data = _cdi_import_export_data($entity_type, $form_state['page_values']);

      $form['export'] = array(
        '#title' => t('Export data'),
        '#type' => 'textarea',
        '#cols' => 60,
        '#value' => $data,
        '#rows' => 40,
        '#description' => t('Copy the export text and paste it into another bundle using the import function.'),
        );
      break;
    }

    return $form;
  }

/**
 * Submit callback: export data.
 */
function cdi_import_export_submit($form, &$form_state) {

  // Save the form state values.
  $step = $form_state['step'];
  $form_state['page_values'][$step] = $form_state['values'];

  // Add step and rebuild.
  $form_state['step'] = $form_state['step'] + 1;
  $form_state['rebuild'] = TRUE;
}

/**
 * Menu callback: present the import page.
 */
function cdi_import_import($form, $form_state, $entity_type = 'node') {

  $form['entity_type'] = array('#type' => 'value', '#value' => $entity_type);

  $form['info'] = array(
    '#markup' => t('This form will import bundle and field definitions.'),
    );

  //$form['type_name'] = array(
  //  '#title' => t('Bundle'),
  //  '#description' => t('Select the bundle to import these fields into.<br/>Select &lt;Create&gt; to create a new bundle to contain the fields.'),
  //  '#type' => 'select',
  //  '#options' => array('<create>' => t('<Create>')) + _cdi_import_bundle_info($entity_type),
  //);

  $form['macro'] = array(
    '#type' => 'textarea',
    '#rows' => 10,
    '#title' => t('Import data'),
    '#required' => TRUE,
    '#description' => t('Paste the text created by a bundle export into this field.'),
    );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
    );

  return $form;
}

/**
 * Submit callback: import data.
 */
function cdi_import_import_manual($data) {

  // Evaluate data.
  eval($data);

  if (isset($data) && is_array($data)) {

    $modules = module_list();
    $bc_info = cdi_import_get_info();

    // Create bundles.
    foreach ($data['bundles'] as $key => $bundle) {
      $entity_type = '';
      if (is_object($bundle)) {
        $entity_type = $bundle->bc_entity_type;
      }
      elseif (is_array($bundle)) {
        $entity_type = $bundle['bc_entity_type'];
      }
      if (!empty($entity_type)) {
        $existing_bundles = _cdi_import_bundle_info($entity_type);
        $bundle_save_callback = $bc_info[$entity_type]['bundle_save_callback'];
        $bundle_info = $bundle_save_callback($bundle);
        if (!isset($existing_bundles[$key])) {
          drupal_set_message(t('%bundle bundle has been created.', array('%bundle' => $bundle->name)));
        }
        else {
          drupal_set_message(t('%bundle bundle has been updated.', array('%bundle' => $bundle->name)));
        }
      }
    }

    // Create or update fields and their instances
    if (isset($data['fields'])) {
      foreach ($data['fields'] as $key => $field) {

        // Check if the field module exists.
        $module = $field['module'];
        if (!isset($modules[$module])) {
          drupal_set_message(t('%field_name field could not be created because the module %module is disabled or missing.', array('%field_name' => $key, '%module' => $module)), 'error');
          continue;
        }

        if (isset($data['instances'][$key])) {

          // Create or update field.
          $prior_field = field_read_field($field['field_name'], array('include_inactive' => TRUE));
          if (!$prior_field) {
            field_create_field($field);
            drupal_set_message(t('%field_name field has been created.', array('%field_name' => $key)));
          }
          else {
            $field['id'] = $prior_field['id'];
            field_update_field($field);
            drupal_set_message(t('%field_name field has been updated.', array('%field_name' => $key)));
          }

          // Create or update field instances.
          foreach ($data['instances'][$key] as $ikey => $instance) {

            // Make sure the needed key exists.
            if (!isset($instance['field_name'])) {
              continue;
            }

            $prior_instance = field_read_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
            if (!$prior_instance) {
              field_create_instance($instance);
              drupal_set_message(t('%field_name instance has been created for @bundle in @entity_type.', array('%field_name' => $key, '@bundle' => $instance['bundle'], '@entity_type' => $instance['entity_type'])));
            }
            else {
              $instance['id'] = $prior_instance['id'];
              $instance['field_id'] = $prior_instance['field_id'];
              field_update_instance($instance);
              drupal_set_message(t('%field_name instance has been updated for @bundle in @entity_type.', array('%field_name' => $key, '@bundle' => $instance['bundle'], '@entity_type' => $instance['entity_type'])));
            }
          }
        }
      }
    }

    // Create / update fieldgroups.
    if (isset($data['fieldgroups'])) {
      if (module_exists('field_group')) {
        ctools_include('export');
        $existing_field_groups = field_group_info_groups();
        foreach ($data['fieldgroups'] as $identifier => $fieldgroup) {
          if (isset($existing_field_groups[$fieldgroup->entity_type][$fieldgroup->bundle][$fieldgroup->mode][$fieldgroup->group_name])) {
            $existing = $existing_field_groups[$fieldgroup->entity_type][$fieldgroup->bundle][$fieldgroup->mode][$fieldgroup->group_name];
            $fieldgroup->id = $existing->id;
            if (!isset($fieldgroup->disabled)) {
              $fieldgroup->disabled = FALSE;
            }
            ctools_export_crud_save('field_group', $fieldgroup);
            ctools_export_crud_set_status('field_group', $fieldgroup, $fieldgroup->disabled);
            drupal_set_message(t('%fieldgroup fieldgroup has been updated for @bundle in @entity_type.', array('%fieldgroup' => $fieldgroup->label, '@bundle' => $fieldgroup->bundle, '@entity_type' => $fieldgroup->entity_type)));
          }
          else {
            unset($fieldgroup->id);
            unset($fieldgroup->export_type);
            if (!isset($fieldgroup->disabled)) {
              $fieldgroup->disabled = FALSE;
            }
            ctools_export_crud_save('field_group', $fieldgroup);
            $fieldgroup->export_type = 1;
            ctools_export_crud_set_status('field_group', $fieldgroup, $fieldgroup->disabled);
            drupal_set_message(t('%fieldgroup fieldgroup has been saved for @bundle in @entity_type.', array('%fieldgroup' => $fieldgroup->label, '@bundle' => $fieldgroup->bundle, '@entity_type' => $fieldgroup->entity_type)));
          }
        }
      }
      else {
        drupal_set_message(t('The fieldgroups could not be saved because the <em>Field group</em> module is disabled or missing.'), 'error');
      }
    }

    // Clear caches.
    field_info_cache_clear();
    if (module_exists('field_group')) {
      cache_clear_all('field_groups', 'cache_field');
    }
  }
  else {
    drupal_set_message(t('The pasted text did not contain any valid export data.'), 'error');
  }
}

/**
 * Submit callback: import data.
 */
function cdi_import_import_submit($form, &$form_state) {

  // Evaluate data.
  eval($form_state['values']['macro']);

  if (isset($data) && is_array($data)) {

    $modules = module_list();
    $bc_info = cdi_import_get_info();

    // Create bundles.
    foreach ($data['bundles'] as $key => $bundle) {
      $entity_type = '';
      if (is_object($bundle)) {
        $entity_type = $bundle->bc_entity_type;
      }
      elseif (is_array($bundle)) {
        $entity_type = $bundle['bc_entity_type'];
      }
      if (!empty($entity_type)) {
        $existing_bundles = _cdi_import_bundle_info($entity_type);
        $bundle_save_callback = $bc_info[$entity_type]['bundle_save_callback'];
        $bundle_info = $bundle_save_callback($bundle);
        if (!isset($existing_bundles[$key])) {
          drupal_set_message(t('%bundle bundle has been created.', array('%bundle' => $bundle->name)));
        }
        else {
          drupal_set_message(t('%bundle bundle has been updated.', array('%bundle' => $bundle->name)));
        }
      }
    }

    // Create or update fields and their instances
    if (isset($data['fields'])) {
      foreach ($data['fields'] as $key => $field) {

        // Check if the field module exists.
        $module = $field['module'];
        if (!isset($modules[$module])) {
          drupal_set_message(t('%field_name field could not be created because the module %module is disabled or missing.', array('%field_name' => $key, '%module' => $module)), 'error');
          continue;
        }

        if (isset($data['instances'][$key])) {

          // Create or update field.
          $prior_field = field_read_field($field['field_name'], array('include_inactive' => TRUE));
          if (!$prior_field) {
            field_create_field($field);
            drupal_set_message(t('%field_name field has been created.', array('%field_name' => $key)));
          }
          else {
            $field['id'] = $prior_field['id'];
            field_update_field($field);
            drupal_set_message(t('%field_name field has been updated.', array('%field_name' => $key)));
          }

          // Create or update field instances.
          foreach ($data['instances'][$key] as $ikey => $instance) {

            // Make sure the needed key exists.
            if (!isset($instance['field_name'])) {
              continue;
            }

            $prior_instance = field_read_instance($instance['entity_type'], $instance['field_name'], $instance['bundle']);
            if (!$prior_instance) {
              field_create_instance($instance);
              drupal_set_message(t('%field_name instance has been created for @bundle in @entity_type.', array('%field_name' => $key, '@bundle' => $instance['bundle'], '@entity_type' => $instance['entity_type'])));
            }
            else {
              $instance['id'] = $prior_instance['id'];
              $instance['field_id'] = $prior_instance['field_id'];
              field_update_instance($instance);
              drupal_set_message(t('%field_name instance has been updated for @bundle in @entity_type.', array('%field_name' => $key, '@bundle' => $instance['bundle'], '@entity_type' => $instance['entity_type'])));
            }
          }
        }
      }
    }

    // Create / update fieldgroups.
    if (isset($data['fieldgroups'])) {
      if (module_exists('field_group')) {
        ctools_include('export');
        $existing_field_groups = field_group_info_groups();
        foreach ($data['fieldgroups'] as $identifier => $fieldgroup) {
          if (isset($existing_field_groups[$fieldgroup->entity_type][$fieldgroup->bundle][$fieldgroup->mode][$fieldgroup->group_name])) {
            $existing = $existing_field_groups[$fieldgroup->entity_type][$fieldgroup->bundle][$fieldgroup->mode][$fieldgroup->group_name];
            $fieldgroup->id = $existing->id;
            if (!isset($fieldgroup->disabled)) {
              $fieldgroup->disabled = FALSE;
            }
            ctools_export_crud_save('field_group', $fieldgroup);
            ctools_export_crud_set_status('field_group', $fieldgroup, $fieldgroup->disabled);
            drupal_set_message(t('%fieldgroup fieldgroup has been updated for @bundle in @entity_type.', array('%fieldgroup' => $fieldgroup->label, '@bundle' => $fieldgroup->bundle, '@entity_type' => $fieldgroup->entity_type)));
          }
          else {
            unset($fieldgroup->id);
            unset($fieldgroup->export_type);
            if (!isset($fieldgroup->disabled)) {
              $fieldgroup->disabled = FALSE;
            }
            ctools_export_crud_save('field_group', $fieldgroup);
            $fieldgroup->export_type = 1;
            ctools_export_crud_set_status('field_group', $fieldgroup, $fieldgroup->disabled);
            drupal_set_message(t('%fieldgroup fieldgroup has been saved for @bundle in @entity_type.', array('%fieldgroup' => $fieldgroup->label, '@bundle' => $fieldgroup->bundle, '@entity_type' => $fieldgroup->entity_type)));
          }
        }
      }
      else {
        drupal_set_message(t('The fieldgroups could not be saved because the <em>Field group</em> module is disabled or missing.'), 'error');
      }
    }

    // Clear caches.
    field_info_cache_clear();
    if (module_exists('field_group')) {
      cache_clear_all('field_groups', 'cache_field');
    }
  }
  else {
    drupal_set_message(t('The pasted text did not contain any valid export data.'), 'error');
  }
}

/**
 * Return bundles for a certain entity type.
 *
 * @param $entity_type
 *   The name of the entity type.
 * @param $table_select
 *   Whether we're returning for the table select or not.
 */
function _cdi_import_bundle_info($entity_type, $table_select = FALSE) {
  static $bundles = array();

  if (!isset($bundles[$entity_type])) {
    $bundles[$entity_type] = array();
    $entity_info = entity_get_info($entity_type);
    $entity_bundles = $entity_info['bundles'];
    ksort($entity_bundles);
    foreach ($entity_bundles as $key => $info) {
      $label = isset($info['label']) ? $info['label'] : drupal_ucfirst(str_replace('_', ' ', $key));
      if ($table_select) {
        $bundles[$entity_type][$key]['label'] = $label;
      }
      else {
        $bundles[$entity_type][$key] = $label;
      }
    }
  }

  return $bundles[$entity_type];
}

/**
 * Creates export data
 *
 * @param $entity_type
 *   The name of the entity_type
 * @param $selected_data
 *   The selected data.
 */
function _cdi_import_export_data($entity_type, $selected_data) {

  ctools_include('export');

  $bc_info = cdi_import_get_info();
  $selected_bundles = $selected_data[1]['bundles'];
  $selected_fields = $selected_data[2]['fields'];
  $selected_fieldgroups = isset($selected_data[2]['fieldgroups']) ? $selected_data[2]['fieldgroups'] : array();
  $full_fieldgroups = isset($selected_data[2]['fieldgroups-full']) ? $selected_data[2]['fieldgroups-full'] : array();

  $data = $instances = array();
  $fields = field_info_fields();
  foreach ($selected_bundles as $bkey => $binfo) {

    if ($bkey !== $binfo) {
      continue;
    }

    $field_instances = field_info_instances($entity_type, $bkey);
    ksort($field_instances);

    // Bundles export data.
    $bundle_info_callback = $bc_info[$entity_type]['bundle_export_callback'];
    $bundle_info = $bundle_info_callback($bkey, $entity_type);
    if (is_object($bundle_info)) {
      $bundle_info->bc_entity_type = $entity_type;
    }
    elseif (is_array($bundle_info)) {
      $bundle_info['bc_entity_type'] = $entity_type;
    }
    $data['bundles'][$bkey] = $bundle_info;

    // Fields export data.
    foreach ($selected_fields as $fkey => $finfo) {
      if ($fkey === $finfo) {

        if (!isset($data['fields'][$fkey])) {
          unset($fields[$fkey]['id']);
          $data['fields'][$fkey] = $fields[$fkey];
        }

        if (isset($field_instances[$fkey])) {
          unset($field_instances[$fkey]['id']);
          unset($field_instances[$fkey]['field_id']);
          $instances[$fkey][] = $field_instances[$fkey];
        }
      }
    }
  }
  ksort($instances);
  $data['instances'] = $instances;

  // Field group export data.
  if (!empty($selected_fieldgroups)) {
    foreach ($selected_fieldgroups as $key => $value) {
      if ($value !== 0) {
        $data['fieldgroups'][$full_fieldgroups[$key]->identifier] = $full_fieldgroups[$key];
      }
    }
  }

  return '$data = ' . ctools_var_export($data) . ';';
}

/**
 * Helper function to load the taxonomy, but remove the vid on the object.
 *
 * @param $name
 *   The name of the bundle.
 */
function _bc_copy_taxonomy_load($name) {
  $bundle = taxonomy_vocabulary_machine_name_load($name);
  return $bundle;
}

/**
 * Helper function to save the taxonomy.
 */
function _bc_copy_taxonomy_save($bundle) {
  if ($bundle->vid) {
    unset($bundle->vid);
  }
  $vid = db_query('SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = :machine_name', array(':machine_name' => $bundle->machine_name))->fetchField();
  if ($vid) {
    $bundle->vid = $vid;
  }
  taxonomy_vocabulary_save($bundle);
}

/**
 * Helper function to ignore a bundle on export.
 */
function _bc_bundle_export_ignore($name) {

}

/**
 * Helper function to ignore a bundle save.
 */
function _bc_bundle_save_ignore($bundle) {

}
